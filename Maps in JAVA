package com.example.vbustrack;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.widget.Toast;
import androidx.annotation.NonNull,
import android.core.content.ContextCompat;
import androidx.fragment.app.FragmentActivity;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCarlback;
import com.google.android.gms maps.SupportMapFragment; 
import com.google.android.gms.maps.model.BitmapDescriptor;
import com.google.android.gms maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms maps.model.MarkerOptions;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database. DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase; 
import com.google.firebase.database.ValueEventListener;
public class MapsActivity extends FragmentActivity implements OnMapReadyCallback {
          private GoogleMap mMap;
          private Marker busMarker;
          @Override
          protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  setContentView(R.layout.activity_maps);
getWindow().setStatusBarColor(ContextCompat.getColor(MapsActivity.this,R.color.black));
// Initialize Firebase 
FirebaseDatabase database = FirebaseDatabase.getInstance(); 
DatabaseReference myRef = database.getReference("test");

// Read from the database 
myRef.addValueEventListener(new ValueEventListener() {
      @Override
      public void onDataChange (@NonNull DataSnapshot dataSnapshot) (
          if (dataSnapshot.exists()) {
              // Get latitude and longitude from Firebase
              String latitude = dataSnapshot.child("lat").getValue(String.class);
              String longitude = dataSnapshot.child("lon").getValue(String.class);
              // Display the map with the updated location 
              displayMap (Double.parseDouble(latitude),Double.parseDouble(longitude));}
}

              @Override
              public void onCancelled (@NonNull DatabaseError databaseError) {
              // Handle errors
              Toast.makeText(MapsActivity.this, "Failed to retrieve data from Firebase", Toast.LENGTH_SHORT).show();
}
});
}
private void displayMap (double latitude, double longitude) {
// Obtain the SupportMapFragment and get notified when the map isready to be used. 
SupportMapFragment mapFragment =  (SupportMapFragment)getSupportFragmentManager().findFragmentById(R.id.map);
           if (mapFragment != null) {
            mapFragment.getMapAsync(new OnMapReadyCallback() {
              @Override
            public void onMapReady (GoogleMap googleMap) { 
          mMap googleMap;
        Lating location = new Lating (latitude, longitude);
      // Remove the previous marker if it exists
      if (busMarker != null) { 
            busMarker.remove();
}

// Add a new marker
busMarker =  mMap.addMarker(new MarkerOptions() 
          .position (location)
          .title("Location of the bus")
          .icon (getBusIcon()));
mMap.moveCamera (CameraUpdateFactory,newLatLngzoom(location, 17));
}
});
}
}
private BitmapDescriptor getBusIcon () {
      BitmapDescriptor busIcon;
        int iconSize = 120 ; // Set your desired icon size in pixels
        Bitmap originalBitmap = BitmapFactory.decodeResource (getResources(), R.drawable.bus_iconl);
        Bitmap scaledBitmap = Bitmap.createScaledBitmap(originalBitmap, iconSize, iconSize, false);
        busIcon = Bi BitmapDescriptorFactory.fromBitmap(scaledBitmap);
        return busIcon;  }

@Override
public void onMapReady (@NonNull GoogleMap googleMap) { 
// You can handle additional map setup here if needed

}
}
